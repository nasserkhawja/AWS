provider "aws" {
  region = "us-east-1"  # Specify your desired AWS region
}

# Create a VPC
resource "aws_vpc" "main_vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "main_vpc"
  }
}

# Create a Subnet within the VPC
resource "aws_subnet" "main_subnet" {
  vpc_id     = aws_vpc.main_vpc.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "main_subnet"
  }
}

# Create an Internet Gateway for the VPC
resource "aws_internet_gateway" "main_igw" {
  vpc_id = aws_vpc.main_vpc.id

  tags = {
    Name = "main_igw"
  }
}

# Create a Route Table and associate it with the Subnet
resource "aws_route_table" "main_route_table" {
  vpc_id = aws_vpc.main_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main_igw.id
  }

  tags = {
    Name = "main_route_table"
  }
}

resource "aws_route_table_association" "main_route_table_association" {
  subnet_id      = aws_subnet.main_subnet.id
  route_table_id = aws_route_table.main_route_table.id
}

# Create a Security Group for SSH access only within the VPC
resource "aws_security_group" "ssh_sg" {
  vpc_id = aws_vpc.main_vpc.id
  name   = "internal_ssh_sg"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "internal_ssh_sg"
  }
}

# Create EC2 Instances with 1TB of EBS storage each
resource "aws_instance" "ec2_instances" {
  count         = 20
  ami           = "ami-0c94855ba95c71c99"  # Example AMI, replace with your desired AMI
  instance_type = "t2.micro"               # Instance type

  subnet_id              = aws_subnet.main_subnet.id
  vpc_security_group_ids = [aws_security_group.ssh_sg.id]

  root_block_device {
    volume_size = 1000   # 1TB volume size
    volume_type = "gp2"
  }

  tags = {
    Name = "ec2_instance_${count.index}"
  }
}

output "instance_ips" {
  value = aws_instance.ec2_instances[*].public_ip
}
